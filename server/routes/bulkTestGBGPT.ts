import express from 'express';
import { GBGPTProvider } from '../providers/gbgptProvider.js';
import { HybridScoringProvider } from '../providers/hybridScoringProvider.js';
import { db } from '../db.js';
import { restaurants } from '../../shared/schema.js';
import { GBGPTTestReporter } from '../reports/gbgptTestReport.js';

const router = express.Router();

/**
 * Bulk import –∏ scoring –Ω–∞ –Ω–æ–≤–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏
 */
router.post('/bulk-test-gbgpt', async (req, res) => {
  try {
    console.log('üöÄ Starting bulk GBGPT test with 50 Sofia restaurants...');
    
    // Sample –°–æ—Ñ–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
    const testRestaurants = [
      {
        name: "–ö–∞—Ñ–µ-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –ö–æ—Å–º–æ—Å",
        address: "—É–ª. –í–∏—Ç–æ—à–∞ 45, –°–æ—Ñ–∏—è",
        cuisineTypes: ["cafe", "bulgarian"],
        lat: 42.6977,
        lng: 23.3219,
        description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è —Å –º–æ–¥–µ—Ä–µ–Ω –ø–æ–¥—Ö–æ–¥"
      },
      {
        name: "–ü–∏—Ü–∞ –¢–µ–º–ø–æ",
        address: "–±—É–ª. –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏ 132, –°–æ—Ñ–∏—è", 
        cuisineTypes: ["pizza", "italian"],
        lat: 42.6869,
        lng: 23.3228,
        description: "–ò—Ç–∞–ª–∏–∞–Ω—Å–∫–∞ –ø–∏—Ü–∞—Ä–∏—è —Å fresh ingredients"
      },
      {
        name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç Made in Home",
        address: "—É–ª. –û–±–æ—Ä–∏—â–µ 42, –°–æ—Ñ–∏—è",
        cuisineTypes: ["modern_european", "healthy"],
        lat: 42.6886,
        lng: 23.3394,
        description: "–ó–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∞ –∫—É—Ö–Ω—è —Å –¥–æ–º–∞—à–µ–Ω –≤–∫—É—Å"
      },
      {
        name: "Ethno",
        address: "—É–ª. –î—è–∫–æ–Ω –ò–≥–Ω–∞—Ç–∏–π 4, –°–æ—Ñ–∏—è",
        cuisineTypes: ["traditional", "bulgarian"],
        lat: 42.6948,
        lng: 23.3227,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è –≤ —Å—Ç–∏–ª–Ω–∞ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞"
      },
      {
        name: "Rainbow Factory",
        address: "—É–ª. –¶–∞—Ä –°–∞–º—É–∏–ª 25, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "vegetarian"],
        lat: 42.6953,
        lng: 23.3264,
        description: "–ó–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∏ –∏ vegetarian –æ–ø—Ü–∏–∏"
      },
      {
        name: "Salad Studio",
        address: "–±—É–ª. –í–∏—Ç–æ—à–∞ 89, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "salads"],
        lat: 42.6934,
        lng: 23.3197,
        description: "Fresh —Å–∞–ª–∞—Ç–∏ –∏ –∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∏ —è—Å—Ç–∏—è"
      },
      {
        name: "Bistro Pesto",
        address: "—É–ª. –®–∏—à–º–∞–Ω 12, –°–æ—Ñ–∏—è",
        cuisineTypes: ["italian", "bistro"],
        lat: 42.6891,
        lng: 23.3312,
        description: "–ò—Ç–∞–ª–∏–∞–Ω—Å–∫–æ bistro —Å fresh pasta"
      },
      {
        name: "Green House",
        address: "—É–ª. –ì—Ä–∞—Ñ –ò–≥–Ω–∞—Ç–∏–µ–≤ 64, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "organic"],
        lat: 42.6847,
        lng: 23.3254,
        description: "–û—Ä–≥–∞–Ω–∏—á–Ω–∞ —Ö—Ä–∞–Ω–∞ –∏ –∑–µ–ª–µ–Ω–∏ smoothies"
      },
      {
        name: "Asia Garden",
        address: "–±—É–ª. –ß–µ—Ä–Ω–∏ –≤—Ä—ä—Ö 47, –°–æ—Ñ–∏—è",
        cuisineTypes: ["asian", "thai"],
        lat: 42.6712,
        lng: 23.3156,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∞ –∞–∑–∏–∞—Ç—Å–∫–∞ –∫—É—Ö–Ω—è"
      },
      {
        name: "Vegetarian Delight",
        address: "—É–ª. –†–∞–∫–æ–≤—Å–∫–∏ 95, –°–æ—Ñ–∏—è", 
        cuisineTypes: ["vegetarian", "vegan"],
        lat: 42.6923,
        lng: 23.3278,
        description: "100% vegetarian —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç —Å vegan –æ–ø—Ü–∏–∏"
      },
      {
        name: "–°—É—à–∏ –ë–∞—Ä –ú–∏–¥–æ—Ä–∏",
        address: "–±—É–ª. –ë—ä–ª–≥–∞—Ä–∏—è 69, –°–æ—Ñ–∏—è",
        cuisineTypes: ["japanese", "sushi"],
        lat: 42.6643,
        lng: 23.2870,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ —è–ø–æ–Ω—Å–∫–æ —Å—É—à–∏ –∏ –≤–µ–≥–∞–Ω rolls"
      },
      {
        name: "La Bamba",
        address: "—É–ª. –ì–ª–∞–¥—Å—Ç–æ–Ω 14, –°–æ—Ñ–∏—è",
        cuisineTypes: ["mexican", "tex_mex"],
        lat: 42.6939,
        lng: 23.3252,
        description: "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞ –∫—É—Ö–Ω—è —Å —Ä–∞—Å—Ç–∏—Ç–µ–ª–Ω–∏ –æ–ø—Ü–∏–∏"
      },
      {
        name: "BioFresh",
        address: "—É–ª. –°–æ–ª—É–Ω—Å–∫–∞ 44, –°–æ—Ñ–∏—è",
        cuisineTypes: ["organic", "healthy"],
        lat: 42.6923,
        lng: 23.3307,
        description: "Bio –∏ organic —Ö—Ä–∞–Ω–∞, fresh —Å–æ–∫–∏"
      },
      {
        name: "Indian Palace",
        address: "—É–ª. –ü–æ–∑–∏—Ç–∞–Ω–æ 20, –°–æ—Ñ–∏—è",
        cuisineTypes: ["indian", "curry"],
        lat: 42.6851,
        lng: 23.3176,
        description: "–ò–Ω–¥–∏–π—Å–∫–∞ –∫—É—Ö–Ω—è —Å –±–æ–≥–∞—Ç –∏–∑–±–æ—Ä –Ω–∞ vegetarian curry"
      },
      {
        name: "Falafel Box",
        address: "—É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∞ 3, –°–æ—Ñ–∏—è",
        cuisineTypes: ["middle_eastern", "falafel"],
        lat: 42.6927,
        lng: 23.3303,
        description: "–ë–ª–∏–∑–∫–æ–∏–∑—Ç–æ—á–Ω–∞ –∫—É—Ö–Ω—è - —Ñ–∞–ª–∞—Ñ–µ–ª –∏ —Ö—É–º—É—Å"
      },
      {
        name: "Green Caf√©",
        address: "–±—É–ª. –ï–≤–ª–æ–≥–∏ –ì–µ–æ—Ä–≥–∏–µ–≤ 77, –°–æ—Ñ–∏—è",
        cuisineTypes: ["cafe", "vegetarian"],
        lat: 42.6789,
        lng: 23.3345,
        description: "–£—é—Ç–Ω–æ –∫–∞—Ñ–µ —Å –≤–µ–≥–∞–Ω –¥–µ—Å–µ—Ä—Ç–∏ –∏ smoothies"
      },
      {
        name: "Pizza Lab",
        address: "—É–ª. –®–µ–π–Ω–æ–≤–æ 7, –°–æ—Ñ–∏—è",
        cuisineTypes: ["pizza", "modern"],
        lat: 42.6924,
        lng: 23.3146,
        description: "–ö—Ä–∞—Ñ—Ç –ø–∏—Ü–∞ —Å vegan cheese –æ–ø—Ü–∏–∏"
      },
      {
        name: "Bowl & Co",
        address: "—É–ª. –ê–ª–∞–±–∏–Ω 50–ê, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "bowls"],
        lat: 42.6972,
        lng: 23.3201,
        description: "Healthy bowls –∏ superfood –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"
      },
      {
        name: "Thai Smile",
        address: "—É–ª. –•–∞–Ω –ê—Å–ø–∞—Ä—É—Ö 22, –°–æ—Ñ–∏—è",
        cuisineTypes: ["thai", "asian"],
        lat: 42.6859,
        lng: 23.3357,
        description: "–¢–∞–π–ª–∞–Ω–¥—Å–∫–∞ –∫—É—Ö–Ω—è —Å tofu —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç–∏"
      },
      {
        name: "Hummus Bar",
        address: "—É–ª. –¶–∞—Ä –ò–≤–∞–Ω –®–∏—à–º–∞–Ω 8, –°–æ—Ñ–∏—è",
        cuisineTypes: ["mediterranean", "lebanese"],
        lat: 42.6889,
        lng: 23.3306,
        description: "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞ –∫—É—Ö–Ω—è —Å –¥–æ–º–∞—à–µ–Ω —Ö—É–º—É—Å"
      }
    ];

    // Extend array to 50 restaurants
    const allTestRestaurants = [...testRestaurants];
    
    // Generate 30 more restaurants with realistic names
    const additionalNames = [
      "–ó–µ–ª–µ–Ω–∞ –ì—Ä–∞–¥–∏–Ω–∞", "–°–ª—ä–Ω—á–µ–≤ –™–≥—ä–ª", "–ë–∏–æ –†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –°–æ—Ñ–∏—è", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏ –†–∞–π",
      "–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –í–∏—Ç–∞–º–∏–Ω", "Fresh & Tasty", "Nature's Kitchen", "Healthy Corner",
      "Veggie Paradise", "Plant Power", "–°–æ—Ñ–∏—è –ì—Ä–∏–π–Ω", "–ï–∫–æ –ë–∏—Å—Ç—Ä–æ", "–ß–∏—Å—Ç–∞ –•—Ä–∞–Ω–∞",
      "–ó–µ–ª–µ–Ω –°–≤—è—Ç", "–ë–∏–æ –ö—É—Ö–Ω—è", "–ù–∞—Ç—É—Ä–∞–ª–Ω–æ", "–°–≤–µ–∂–µ—Å—Ç", "–ì—Ä–∞–¥–∏–Ω—Å–∫–∏ –†–µ—Å—Ç–æ—Ä–∞–Ω—Ç",
      "Vegan House Sofia", "Raw Bar", "Juice & Salad", "Fresh Market", "Green Life",
      "–°–æ—Ñ–∏—è –û—Ä–≥–∞–Ω–∏–∫", "Plant Bistro", "Veggie Grill", "Natural Foods", "Bio Corner",
      "Fresh Daily", "Healthy Choice"
    ];

    const streets = [
      "–±—É–ª. –í–∏—Ç–æ—à–∞", "—É–ª. –ì—Ä–∞—Ñ –ò–≥–Ω–∞—Ç–∏–µ–≤", "–±—É–ª. –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏", "—É–ª. –°–æ–ª—É–Ω—Å–∫–∞",
      "—É–ª. –†–∞–∫–æ–≤—Å–∫–∏", "–±—É–ª. –ë—ä–ª–≥–∞—Ä–∏—è", "—É–ª. –ü–∏—Ä–æ—Ç—Å–∫–∞", "–±—É–ª. –¶–∞—Ä –û—Å–≤–æ–±–æ–¥–∏—Ç–µ–ª",
      "—É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∞", "–±—É–ª. –ü–∞—Ç—Ä–∏–∞—Ä—Ö –ï–≤—Ç–∏–º–∏–π"
    ];

    const cuisineOptions = [
      ["healthy", "organic"], ["vegetarian", "salads"], ["cafe", "breakfast"],
      ["mediterranean", "greek"], ["asian", "vietnamese"], ["modern", "fusion"],
      ["bulgarian", "traditional"], ["italian", "pasta"], ["mexican", "burrito"],
      ["indian", "vegetarian"]
    ];

    for (let i = 0; i < 30; i++) {
      const streetNum = Math.floor(Math.random() * 200) + 1;
      const streetName = streets[Math.floor(Math.random() * streets.length)];
      
      allTestRestaurants.push({
        name: additionalNames[i] || `–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –°–æ—Ñ–∏—è ${i + 21}`,
        address: `${streetName} ${streetNum}, –°–æ—Ñ–∏—è`,
        cuisineTypes: cuisineOptions[i % cuisineOptions.length],
        lat: 42.6977 + (Math.random() - 0.5) * 0.05,
        lng: 23.3219 + (Math.random() - 0.5) * 0.05,
        description: `${additionalNames[i] ? '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –≤ –∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∞ —Ö—Ä–∞–Ω–∞' : '–ú–æ–¥–µ—Ä–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç'} —Å –≤–µ–≥–∞–Ω –æ–ø—Ü–∏–∏`
      });
    }

    console.log(`üìä Processing ${allTestRestaurants.length} restaurants with Hybrid GBGPT/OpenAI...`);
    
    // Use HybridScoringProvider instead of direct GBGPT
    const hybrid = new HybridScoringProvider();
    const results: any[] = [];
    const failures: any[] = [];
    let processed = 0;

    // Process in batches of 5 to avoid overwhelming the API
    for (let i = 0; i < allTestRestaurants.length; i += 5) {
      const batch = allTestRestaurants.slice(i, i + 5);
      
      console.log(`üîÑ Processing batch ${Math.floor(i/5) + 1}/${Math.ceil(allTestRestaurants.length/5)}`);
      
      const batchPromises = batch.map(async (restaurant, index) => {
        try {
          // Add small delay between requests in batch (500ms apart)
          await new Promise(resolve => setTimeout(resolve, index * 500));
          
          console.log(`üîÑ Scoring: ${restaurant.name}`);
          const startTime = Date.now();
          
          const score = await hybrid.scoreRestaurant(restaurant);
          const duration = Date.now() - startTime;
          
          processed++;
          console.log(`‚úÖ ${restaurant.name} scored in ${duration}ms (${processed}/${allTestRestaurants.length})`);
          
          return {
            restaurant,
            score,
            duration,
            success: true
          };
          
        } catch (error: any) {
          console.error(`‚ùå Failed to score ${restaurant.name}:`, error.message);
          processed++;
          
          return {
            restaurant,
            error: error.message,
            success: false
          };
        }
      });

      const batchResults = await Promise.allSettled(batchPromises);
      
      batchResults.forEach((result) => {
        if (result.status === 'fulfilled') {
          if (result.value.success) {
            results.push(result.value);
          } else {
            failures.push(result.value);
          }
        }
      });

      // Progress update
      const successRate = results.length > 0 ? ((results.length / processed) * 100).toFixed(1) : '0';
      console.log(`üìä Progress: ${processed}/${allTestRestaurants.length} (${successRate}% success rate)`);
      
      // Pause between batches (2 seconds) - shorter since we're using OpenAI fallback
      if (i + 5 < allTestRestaurants.length) {
        console.log('‚è≥ Waiting 2 seconds before next batch...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    // Calculate statistics
    const avgDuration = results.length > 0 
      ? results.reduce((sum, r) => sum + r.duration, 0) / results.length 
      : 0;
    const avgScore = results.length > 0
      ? results.reduce((sum, r) => sum + r.score.overallScore, 0) / results.length
      : 0;
    
    const stats = {
      totalProcessed: allTestRestaurants.length,
      successful: results.length,
      failed: failures.length,
      successRate: `${((results.length / allTestRestaurants.length) * 100).toFixed(1)}%`,
      averageResponseTime: `${avgDuration.toFixed(0)}ms`,
      averageVeganScore: avgScore.toFixed(2),
      primaryProvider: results.length > 0 ? results[0].score.provider : 'Unknown',
      timestamp: new Date().toISOString()
    };

    console.log('üéâ Bulk test completed!', stats);

    res.json({
      success: true,
      stats,
      results: results, // Return ALL results for import
      failures: failures.slice(0, 5),  // First 5 failures
      message: `Hybrid bulk test completed: ${results.length}/${allTestRestaurants.length} successful`
    });
    
  } catch (error: any) {
    console.error('‚ùå Bulk GBGPT test failed:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Bulk GBGPT test failed'
    });
  }
});

/**
 * Import successful results to database
 */
router.post('/import-gbgpt-results', async (req, res) => {
  try {
    const { results } = req.body;
    
    if (!results || !Array.isArray(results)) {
      return res.status(400).json({ error: 'Results array required' });
    }

    console.log(`üì§ Importing ${results.length} scored restaurants to database...`);
    
    const imported = [];
    const errors = [];
    
    for (const result of results) {
      try {
        const { restaurant, score } = result;
        
        // Prepare restaurant data for insertion
        const restaurantData = {
          name: restaurant.name,
          address: restaurant.address,
          cuisine_types: restaurant.cuisineTypes,
          latitude: restaurant.lat,
          longitude: restaurant.lng,
          place_id: `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          vegan_score: score.overallScore,
          price_level: 2, // Default medium price
          user_ratings_total: 0,
          rating: 0,
          opening_hours: null,
          website: null,
          phone_number: null,
          photos: [],
          reviews: [],
          cached_at: new Date(),
          created_at: new Date(),
          updated_at: new Date()
        };
        
        // Insert restaurant with score
        const [insertedRestaurant] = await db.insert(restaurants).values([restaurantData]).returning();
        
        imported.push(insertedRestaurant);
        console.log(`‚úÖ Imported: ${restaurant.name} (Score: ${score.overallScore})`);
        
      } catch (error: any) {
        console.error(`‚ùå Failed to import ${result.restaurant.name}:`, error.message);
        errors.push({
          restaurant: result.restaurant.name,
          error: error.message
        });
      }
    }

    const response = {
      success: true,
      imported: imported.length,
      failed: errors.length,
      message: `Successfully imported ${imported.length} restaurants`,
      errors: errors.length > 0 ? errors.slice(0, 5) : []
    };

    console.log('üìä Import summary:', response);
    res.json(response);
    
  } catch (error: any) {
    console.error('‚ùå Import failed:', error);
    
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * Bulk import all 50 test restaurants at once
 */
router.post('/import-all-test-restaurants', async (req, res) => {
  try {
    console.log('üöÄ Generating and importing 50 test restaurants directly...');
    
    // Generate the same 50 restaurants
    const testRestaurants = [
      {
        name: "–ö–∞—Ñ–µ-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –ö–æ—Å–º–æ—Å",
        address: "—É–ª. –í–∏—Ç–æ—à–∞ 45, –°–æ—Ñ–∏—è",
        cuisineTypes: ["cafe", "bulgarian"],
        lat: 42.6977,
        lng: 23.3219,
        description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è —Å –º–æ–¥–µ—Ä–µ–Ω –ø–æ–¥—Ö–æ–¥"
      },
      {
        name: "–ü–∏—Ü–∞ –¢–µ–º–ø–æ",
        address: "–±—É–ª. –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏ 132, –°–æ—Ñ–∏—è", 
        cuisineTypes: ["pizza", "italian"],
        lat: 42.6869,
        lng: 23.3228,
        description: "–ò—Ç–∞–ª–∏–∞–Ω—Å–∫–∞ –ø–∏—Ü–∞—Ä–∏—è —Å fresh ingredients"
      },
      {
        name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç Made in Home",
        address: "—É–ª. –û–±–æ—Ä–∏—â–µ 42, –°–æ—Ñ–∏—è",
        cuisineTypes: ["modern_european", "healthy"],
        lat: 42.6886,
        lng: 23.3394,
        description: "–ó–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∞ –∫—É—Ö–Ω—è —Å –¥–æ–º–∞—à–µ–Ω –≤–∫—É—Å"
      },
      {
        name: "Ethno",
        address: "—É–ª. –î—è–∫–æ–Ω –ò–≥–Ω–∞—Ç–∏–π 4, –°–æ—Ñ–∏—è",
        cuisineTypes: ["traditional", "bulgarian"],
        lat: 42.6948,
        lng: 23.3227,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è –≤ —Å—Ç–∏–ª–Ω–∞ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞"
      },
      {
        name: "Rainbow Factory",
        address: "—É–ª. –¶–∞—Ä –°–∞–º—É–∏–ª 25, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "vegetarian"],
        lat: 42.6953,
        lng: 23.3264,
        description: "–ó–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∏ –∏ vegetarian –æ–ø—Ü–∏–∏"
      },
      {
        name: "Salad Studio",
        address: "–±—É–ª. –í–∏—Ç–æ—à–∞ 89, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "salads"],
        lat: 42.6934,
        lng: 23.3197,
        description: "Fresh —Å–∞–ª–∞—Ç–∏ –∏ –∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∏ —è—Å—Ç–∏—è"
      },
      {
        name: "Bistro Pesto",
        address: "—É–ª. –®–∏—à–º–∞–Ω 12, –°–æ—Ñ–∏—è",
        cuisineTypes: ["italian", "bistro"],
        lat: 42.6891,
        lng: 23.3312,
        description: "–ò—Ç–∞–ª–∏–∞–Ω—Å–∫–æ bistro —Å fresh pasta"
      },
      {
        name: "Green House",
        address: "—É–ª. –ì—Ä–∞—Ñ –ò–≥–Ω–∞—Ç–∏–µ–≤ 64, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "organic"],
        lat: 42.6847,
        lng: 23.3254,
        description: "–û—Ä–≥–∞–Ω–∏—á–Ω–∞ —Ö—Ä–∞–Ω–∞ –∏ –∑–µ–ª–µ–Ω–∏ smoothies"
      },
      {
        name: "Asia Garden",
        address: "–±—É–ª. –ß–µ—Ä–Ω–∏ –≤—Ä—ä—Ö 47, –°–æ—Ñ–∏—è",
        cuisineTypes: ["asian", "thai"],
        lat: 42.6712,
        lng: 23.3156,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∞ –∞–∑–∏–∞—Ç—Å–∫–∞ –∫—É—Ö–Ω—è"
      },
      {
        name: "Vegetarian Delight",
        address: "—É–ª. –†–∞–∫–æ–≤—Å–∫–∏ 95, –°–æ—Ñ–∏—è", 
        cuisineTypes: ["vegetarian", "vegan"],
        lat: 42.6923,
        lng: 23.3278,
        description: "100% vegetarian —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç —Å vegan –æ–ø—Ü–∏–∏"
      },
      {
        name: "–°—É—à–∏ –ë–∞—Ä –ú–∏–¥–æ—Ä–∏",
        address: "–±—É–ª. –ë—ä–ª–≥–∞—Ä–∏—è 69, –°–æ—Ñ–∏—è",
        cuisineTypes: ["japanese", "sushi"],
        lat: 42.6643,
        lng: 23.2870,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ —è–ø–æ–Ω—Å–∫–æ —Å—É—à–∏ –∏ –≤–µ–≥–∞–Ω rolls"
      },
      {
        name: "La Bamba",
        address: "—É–ª. –ì–ª–∞–¥—Å—Ç–æ–Ω 14, –°–æ—Ñ–∏—è",
        cuisineTypes: ["mexican", "tex_mex"],
        lat: 42.6939,
        lng: 23.3252,
        description: "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞ –∫—É—Ö–Ω—è —Å —Ä–∞—Å—Ç–∏—Ç–µ–ª–Ω–∏ –æ–ø—Ü–∏–∏"
      },
      {
        name: "BioFresh",
        address: "—É–ª. –°–æ–ª—É–Ω—Å–∫–∞ 44, –°–æ—Ñ–∏—è",
        cuisineTypes: ["organic", "healthy"],
        lat: 42.6923,
        lng: 23.3307,
        description: "Bio –∏ organic —Ö—Ä–∞–Ω–∞, fresh —Å–æ–∫–∏"
      },
      {
        name: "Indian Palace",
        address: "—É–ª. –ü–æ–∑–∏—Ç–∞–Ω–æ 20, –°–æ—Ñ–∏—è",
        cuisineTypes: ["indian", "curry"],
        lat: 42.6851,
        lng: 23.3176,
        description: "–ò–Ω–¥–∏–π—Å–∫–∞ –∫—É—Ö–Ω—è —Å –±–æ–≥–∞—Ç –∏–∑–±–æ—Ä –Ω–∞ vegetarian curry"
      },
      {
        name: "Falafel Box",
        address: "—É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∞ 3, –°–æ—Ñ–∏—è",
        cuisineTypes: ["middle_eastern", "falafel"],
        lat: 42.6927,
        lng: 23.3303,
        description: "–ë–ª–∏–∑–∫–æ–∏–∑—Ç–æ—á–Ω–∞ –∫—É—Ö–Ω—è - —Ñ–∞–ª–∞—Ñ–µ–ª –∏ —Ö—É–º—É—Å"
      },
      {
        name: "Green Caf√©",
        address: "–±—É–ª. –ï–≤–ª–æ–≥–∏ –ì–µ–æ—Ä–≥–∏–µ–≤ 77, –°–æ—Ñ–∏—è",
        cuisineTypes: ["cafe", "vegetarian"],
        lat: 42.6789,
        lng: 23.3345,
        description: "–£—é—Ç–Ω–æ –∫–∞—Ñ–µ —Å –≤–µ–≥–∞–Ω –¥–µ—Å–µ—Ä—Ç–∏ –∏ smoothies"
      },
      {
        name: "Pizza Lab",
        address: "—É–ª. –®–µ–π–Ω–æ–≤–æ 7, –°–æ—Ñ–∏—è",
        cuisineTypes: ["pizza", "modern"],
        lat: 42.6924,
        lng: 23.3146,
        description: "–ö—Ä–∞—Ñ—Ç –ø–∏—Ü–∞ —Å vegan cheese –æ–ø—Ü–∏–∏"
      },
      {
        name: "Bowl & Co",
        address: "—É–ª. –ê–ª–∞–±–∏–Ω 50–ê, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "bowls"],
        lat: 42.6972,
        lng: 23.3201,
        description: "Healthy bowls –∏ superfood –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"
      },
      {
        name: "Thai Smile",
        address: "—É–ª. –•–∞–Ω –ê—Å–ø–∞—Ä—É—Ö 22, –°–æ—Ñ–∏—è",
        cuisineTypes: ["thai", "asian"],
        lat: 42.6859,
        lng: 23.3357,
        description: "–¢–∞–π–ª–∞–Ω–¥—Å–∫–∞ –∫—É—Ö–Ω—è —Å tofu —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç–∏"
      },
      {
        name: "Hummus Bar",
        address: "—É–ª. –¶–∞—Ä –ò–≤–∞–Ω –®–∏—à–º–∞–Ω 8, –°–æ—Ñ–∏—è",
        cuisineTypes: ["mediterranean", "lebanese"],
        lat: 42.6889,
        lng: 23.3306,
        description: "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞ –∫—É—Ö–Ω—è —Å –¥–æ–º–∞—à–µ–Ω —Ö—É–º—É—Å"
      }
    ];

    // Extend array to 50 restaurants
    const allTestRestaurants = [...testRestaurants];
    
    // Generate 30 more restaurants with realistic names
    const additionalNames = [
      "–ó–µ–ª–µ–Ω–∞ –ì—Ä–∞–¥–∏–Ω–∞", "–°–ª—ä–Ω—á–µ–≤ –™–≥—ä–ª", "–ë–∏–æ –†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –°–æ—Ñ–∏—è", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏ –†–∞–π",
      "–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –í–∏—Ç–∞–º–∏–Ω", "Fresh & Tasty", "Nature's Kitchen", "Healthy Corner",
      "Veggie Paradise", "Plant Power", "–°–æ—Ñ–∏—è –ì—Ä–∏–π–Ω", "–ï–∫–æ –ë–∏—Å—Ç—Ä–æ", "–ß–∏—Å—Ç–∞ –•—Ä–∞–Ω–∞",
      "–ó–µ–ª–µ–Ω –°–≤—è—Ç", "–ë–∏–æ –ö—É—Ö–Ω—è", "–ù–∞—Ç—É—Ä–∞–ª–Ω–æ", "–°–≤–µ–∂–µ—Å—Ç", "–ì—Ä–∞–¥–∏–Ω—Å–∫–∏ –†–µ—Å—Ç–æ—Ä–∞–Ω—Ç",
      "Vegan House Sofia", "Raw Bar", "Juice & Salad", "Fresh Market", "Green Life",
      "–°–æ—Ñ–∏—è –û—Ä–≥–∞–Ω–∏–∫", "Plant Bistro", "Veggie Grill", "Natural Foods", "Bio Corner",
      "Fresh Daily", "Healthy Choice"
    ];

    const streets = [
      "–±—É–ª. –í–∏—Ç–æ—à–∞", "—É–ª. –ì—Ä–∞—Ñ –ò–≥–Ω–∞—Ç–∏–µ–≤", "–±—É–ª. –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏", "—É–ª. –°–æ–ª—É–Ω—Å–∫–∞",
      "—É–ª. –†–∞–∫–æ–≤—Å–∫–∏", "–±—É–ª. –ë—ä–ª–≥–∞—Ä–∏—è", "—É–ª. –ü–∏—Ä–æ—Ç—Å–∫–∞", "–±—É–ª. –¶–∞—Ä –û—Å–≤–æ–±–æ–¥–∏—Ç–µ–ª",
      "—É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∞", "–±—É–ª. –ü–∞—Ç—Ä–∏–∞—Ä—Ö –ï–≤—Ç–∏–º–∏–π"
    ];

    const cuisineOptions = [
      ["healthy", "organic"], ["vegetarian", "salads"], ["cafe", "breakfast"],
      ["mediterranean", "greek"], ["asian", "vietnamese"], ["modern", "fusion"],
      ["bulgarian", "traditional"], ["italian", "pasta"], ["mexican", "burrito"],
      ["indian", "vegetarian"]
    ];

    for (let i = 0; i < 30; i++) {
      const streetNum = Math.floor(Math.random() * 200) + 1;
      const streetName = streets[Math.floor(Math.random() * streets.length)];
      
      allTestRestaurants.push({
        name: additionalNames[i] || `–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –°–æ—Ñ–∏—è ${i + 21}`,
        address: `${streetName} ${streetNum}, –°–æ—Ñ–∏—è`,
        cuisineTypes: cuisineOptions[i % cuisineOptions.length],
        lat: 42.6977 + (Math.random() - 0.5) * 0.05,
        lng: 23.3219 + (Math.random() - 0.5) * 0.05,
        description: `${additionalNames[i] ? '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –≤ –∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∞ —Ö—Ä–∞–Ω–∞' : '–ú–æ–¥–µ—Ä–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç'} —Å –≤–µ–≥–∞–Ω –æ–ø—Ü–∏–∏`
      });
    }

    console.log(`üì§ Importing ${allTestRestaurants.length} restaurants directly to database...`);
    
    const imported = [];
    const errors = [];
    
    // Score and import each restaurant
    const hybrid = new HybridScoringProvider();
    
    for (let i = 0; i < allTestRestaurants.length; i++) {
      const restaurant = allTestRestaurants[i];
      
      try {
        // Get AI score
        const score = await hybrid.scoreRestaurant(restaurant);
        
        // Prepare restaurant data for insertion
        const restaurantData = {
          name: restaurant.name,
          address: restaurant.address,
          cuisine_types: restaurant.cuisineTypes,
          latitude: restaurant.lat,
          longitude: restaurant.lng,
          place_id: `test-${Date.now()}-${i}-${Math.random().toString(36).substr(2, 9)}`,
          vegan_score: score.overallScore,
          price_level: 2, // Default medium price
          user_ratings_total: 0,
          rating: 0,
          opening_hours: null,
          website: null,
          phone_number: null,
          photos: [],
          reviews: [],
          cached_at: new Date(),
          created_at: new Date(),
          updated_at: new Date()
        };
        
        // Insert restaurant with score
        const [insertedRestaurant] = await db.insert(restaurants).values([restaurantData]).returning();
        
        imported.push(insertedRestaurant);
        console.log(`‚úÖ Imported ${i+1}/${allTestRestaurants.length}: ${restaurant.name} (Score: ${score.overallScore})`);
        
      } catch (error: any) {
        console.error(`‚ùå Failed to import ${restaurant.name}:`, error.message);
        errors.push({
          restaurant: restaurant.name,
          error: error.message
        });
      }
      
      // Small delay between imports
      if (i % 5 === 0 && i > 0) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    const response = {
      success: true,
      totalAttempted: allTestRestaurants.length,
      imported: imported.length,
      failed: errors.length,
      message: `Successfully imported ${imported.length} out of ${allTestRestaurants.length} restaurants`,
      errors: errors.slice(0, 5) // First 5 errors
    };

    console.log('üéâ Bulk import completed!', response);
    res.json(response);
    
  } catch (error: any) {
    console.error('‚ùå Bulk import failed:', error);
    
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * Enhanced bulk test with automatic report generation
 */
router.post('/bulk-test-gbgpt-with-report', async (req, res) => {
  try {
    console.log('üöÄ Starting enhanced bulk test with report generation...');
    
    // Initialize reporter
    const reporter = new GBGPTTestReporter();
    
    // Generate the same 50 test restaurants
    const testRestaurants = [
      {
        name: "–ö–∞—Ñ–µ-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –ö–æ—Å–º–æ—Å",
        address: "—É–ª. –í–∏—Ç–æ—à–∞ 45, –°–æ—Ñ–∏—è",
        cuisineTypes: ["cafe", "bulgarian"],
        lat: 42.6977,
        lng: 23.3219,
        description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è —Å –º–æ–¥–µ—Ä–µ–Ω –ø–æ–¥—Ö–æ–¥"
      },
      {
        name: "–ü–∏—Ü–∞ –¢–µ–º–ø–æ",
        address: "–±—É–ª. –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏ 132, –°–æ—Ñ–∏—è", 
        cuisineTypes: ["pizza", "italian"],
        lat: 42.6869,
        lng: 23.3228,
        description: "–ò—Ç–∞–ª–∏–∞–Ω—Å–∫–∞ –ø–∏—Ü–∞—Ä–∏—è —Å fresh ingredients"
      },
      {
        name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç Made in Home",
        address: "—É–ª. –û–±–æ—Ä–∏—â–µ 42, –°–æ—Ñ–∏—è",
        cuisineTypes: ["modern_european", "healthy"],
        lat: 42.6886,
        lng: 23.3394,
        description: "–ó–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∞ –∫—É—Ö–Ω—è —Å –¥–æ–º–∞—à–µ–Ω –≤–∫—É—Å"
      },
      {
        name: "Ethno",
        address: "—É–ª. –î—è–∫–æ–Ω –ò–≥–Ω–∞—Ç–∏–π 4, –°–æ—Ñ–∏—è",
        cuisineTypes: ["traditional", "bulgarian"],
        lat: 42.6948,
        lng: 23.3227,
        description: "–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è –≤ —Å—Ç–∏–ª–Ω–∞ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞"
      },
      {
        name: "Rainbow Factory",
        address: "—É–ª. –¶–∞—Ä –°–∞–º—É–∏–ª 25, –°–æ—Ñ–∏—è",
        cuisineTypes: ["healthy", "vegetarian"],
        lat: 42.6953,
        lng: 23.3264,
        description: "–ó–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∏ –∏ vegetarian –æ–ø—Ü–∏–∏"
      }
    ];

    // Extend to 50 restaurants
    const allTestRestaurants = [...testRestaurants];
    for (let i = 5; i < 50; i++) {
      allTestRestaurants.push({
        name: `–¢–µ—Å—Ç –†–µ—Å—Ç–æ—Ä–∞–Ω—Ç ${i + 1}`,
        address: `—É–ª. –¢–µ—Å—Ç–æ–≤–∞ ${i + 1}, –°–æ—Ñ–∏—è`,
        cuisineTypes: ["restaurant", "international"],
        lat: 42.6977 + (Math.random() - 0.5) * 0.05,
        lng: 23.3219 + (Math.random() - 0.5) * 0.05,
        description: `–¢–µ—Å—Ç–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –Ω–æ–º–µ—Ä ${i + 1} –∑–∞ GBGPT –∞–Ω–∞–ª–∏–∑`
      });
    }

    console.log(`üìä Processing ${allTestRestaurants.length} restaurants with enhanced tracking...`);
    
    const hybrid = new HybridScoringProvider();
    const results: any[] = [];
    const failures: any[] = [];
    let processed = 0;

    // Process all restaurants
    for (let i = 0; i < allTestRestaurants.length; i += 5) {
      const batch = allTestRestaurants.slice(i, i + 5);
      
      console.log(`üîÑ Processing batch ${Math.floor(i/5) + 1}/${Math.ceil(allTestRestaurants.length/5)}`);
      
      const batchPromises = batch.map(async (restaurant, index) => {
        try {
          await new Promise(resolve => setTimeout(resolve, index * 200));
          
          const startTime = Date.now();
          const score = await hybrid.scoreRestaurant(restaurant);
          const duration = Date.now() - startTime;
          
          processed++;
          console.log(`‚úÖ ${restaurant.name} scored in ${duration}ms (${processed}/${allTestRestaurants.length})`);
          
          return {
            restaurant,
            score,
            duration,
            success: true,
            provider: score.provider || 'OpenAI (fallback)'
          };
          
        } catch (error: any) {
          console.error(`‚ùå Failed to score ${restaurant.name}:`, error.message);
          processed++;
          
          return {
            restaurant,
            error: error.message,
            success: false,
            duration: 0,
            provider: 'Failed'
          };
        }
      });

      const batchResults = await Promise.allSettled(batchPromises);
      
      batchResults.forEach((result) => {
        if (result.status === 'fulfilled') {
          if (result.value.success) {
            results.push(result.value);
          } else {
            failures.push(result.value);
          }
        }
      });

      // Small pause between batches
      if (i + 5 < allTestRestaurants.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    // Calculate statistics
    const avgDuration = results.length > 0 
      ? results.reduce((sum, r) => sum + r.duration, 0) / results.length 
      : 0;
    const avgScore = results.length > 0
      ? results.reduce((sum, r) => sum + r.score.overallScore, 0) / results.length
      : 0;
    
    const stats = {
      totalProcessed: allTestRestaurants.length,
      successful: results.length,
      failed: failures.length,
      successRate: `${((results.length / allTestRestaurants.length) * 100).toFixed(1)}%`,
      averageResponseTime: `${avgDuration.toFixed(0)}ms`,
      averageVeganScore: avgScore.toFixed(2),
      primaryProvider: results.length > 0 ? results[0].provider : 'Unknown',
      timestamp: new Date().toISOString()
    };

    // Add results to reporter and generate report
    reporter.addResults([...results, ...failures], stats);
    const reportPath = await reporter.saveReport();
    const reportContent = reporter.generateMarkdownReport();

    console.log('üéâ Enhanced bulk test completed with report!', stats);

    res.json({
      success: true,
      stats,
      reportPath,
      reportPreview: reportContent.substring(0, 2000) + '...',
      message: `Test completed and report saved to ${reportPath}`
    });
    
  } catch (error: any) {
    console.error('‚ùå Enhanced bulk test failed:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Enhanced bulk test failed'
    });
  }
});

/**
 * Get bulk test status
 */
router.get('/bulk-test-status', async (req, res) => {
  try {
    // Get current restaurant count
    const totalRestaurants = await db.select({ count: restaurants.id }).from(restaurants);
    
    // Get hybrid provider status
    const hybrid = new HybridScoringProvider();
    const providerStatus = await hybrid.getStatus();
    
    res.json({
      databaseRestaurants: totalRestaurants.length,
      providerStatus,
      ready: true,
      message: 'Bulk test endpoints ready'
    });
    
  } catch (error: any) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

export default router;