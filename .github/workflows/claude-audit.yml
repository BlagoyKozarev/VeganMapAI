name: Claude Code Audit

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.js"
      - "**/*.jsx"
      - "**/*.mjs"
      - "**/*.cjs"
      - "**/*.py"
      - "**/*.go"
      - "**/*.rs"
      - "**/*.java"
      - "**/*.json"
      - "package.json"
      - "pnpm-lock.yaml"
      - "yarn.lock"
      - "bun.lockb"
      - "requirements.txt"
      - "pyproject.toml"
      - "go.mod"
      - "Cargo.toml"
      - "Dockerfile"
      - "**/vite.config.*"
      - "**/next.config.*"
      - "**/tsconfig*.json"
      - "**/.eslintrc*"
      - "**/.prettierrc*"
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: claude-audit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run Claude audit
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_MODEL: ${{ vars.CLAUDE_MODEL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          node scripts/claude_audit.js

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: claude-audit
          path: |
            audit/claude-audit.md
            audit/claude-audit.json
          if-no-files-found: error
          retention-days: 14

      - name: Comment on PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = '';
            try { body = fs.readFileSync('audit/claude-audit.md','utf8'); }
            catch { body = '–ù–µ—É—Å–ø–µ—à–Ω–æ —á–µ—Ç–µ–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç–∞.'; }
            const max = 18000;
            const trimmed = body.length > max ? body.slice(0,max) + "\n\n‚Ä¶ (—Å—ä–∫—Ä–∞—Ç–µ–Ω–æ)" : body;
            const comment = `### üß™ Claude Code Audit
<details>
<summary>–û—Ç–≤–æ—Ä–∏ –æ—Ç—á–µ—Ç–∞</summary>

${trimmed}

</details>

–ê—Ä—Ç–µ—Ñ–∞–∫—Ç: **Actions ‚Üí —Ç–µ–∫—É—â–∏—è run ‚Üí Artifacts ‚Üí claude-audit**.`;
            const { context } = github;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
