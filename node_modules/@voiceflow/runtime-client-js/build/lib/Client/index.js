"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const verror_1 = __importDefault(require("@voiceflow/verror"));
const axios_1 = __importDefault(require("axios"));
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const adapters_1 = require("./adapters");
class Client {
    constructor({ variables, endpoint, versionID, apiKey, axiosConfig }) {
        this.cachedInitState = null;
        if (!Client.isAPIKey(apiKey)) {
            throw new verror_1.default('Invalid API key', verror_1.default.HTTP_STATUS.UNAUTHORIZED);
        }
        this.axios = axios_1.default.create(Object.assign(Object.assign({}, axiosConfig), { baseURL: endpoint, headers: { authorization: apiKey } }));
        this.initVariables = variables;
        this.versionID = versionID;
    }
    async getInitialState() {
        if (!this.cachedInitState) {
            const _a = await this.axios.get(`/interact/${this.versionID}/state`).then((response) => response.data), { variables } = _a, restState = __rest(_a, ["variables"]);
            this.cachedInitState = Object.assign(Object.assign({}, restState), { variables: Object.assign(Object.assign({}, variables), this.initVariables) });
        }
        return cloneDeep_1.default(this.cachedInitState);
    }
    async interact(body) {
        return this.axios
            .post(`/interact/${this.versionID}`, body)
            .then((response) => response.data)
            .then((context) => adapters_1.extractAudioStep(context));
    }
    getVersionID() {
        return this.versionID;
    }
    static isAPIKey(authorization) {
        return !!authorization && authorization.startsWith('VF.') && authorization.match(/\./g).length === 2;
    }
}
exports.Client = Client;
exports.default = Client;
//# sourceMappingURL=index.js.map