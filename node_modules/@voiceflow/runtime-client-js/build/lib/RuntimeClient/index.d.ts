import { Config as DataConfig } from '@voiceflow/general-types';
import { State } from '@voiceflow/runtime';
import Client from "../Client";
import Context from "../Context";
import { AfterProcessingEventHandler, BeforeProcessingEventHandler, GeneralTraceEventHandler, ResponseHandler, TraceEventHandler } from "../Events";
import { GeneralRequest, ResponseContext, TraceEvent, TraceType } from "../types";
declare type OnMethodHandlerArgMap<V> = {
    [K in TraceType]: TraceEventHandler<K, V>;
} & {
    [TraceEvent.GENERAL]: GeneralTraceEventHandler<V>;
    [TraceEvent.BEFORE_PROCESSING]: BeforeProcessingEventHandler<V>;
    [TraceEvent.AFTER_PROCESSING]: AfterProcessingEventHandler<V>;
};
export declare class RuntimeClient<V extends Record<string, any> = Record<string, any>> {
    private client;
    private dataConfig;
    private context;
    private events;
    private responseHandler;
    constructor(state: State, { client, dataConfig }: {
        client: Client<V>;
        dataConfig?: DataConfig;
    });
    start(): Promise<Context<V>>;
    sendText(userInput: string): Promise<Context<V>>;
    sendIntent(name: string, entities?: {
        name: string;
        value: string;
        query?: string;
    }[], query?: string, confidence?: number): Promise<Context<V>>;
    sendRequest(request: GeneralRequest): Promise<Context<V>>;
    on<T extends TraceType | TraceEvent>(event: T, handler: OnMethodHandlerArgMap<V>[T]): void;
    onResponse(responseHandler: ResponseHandler<V>): Promise<void>;
    buildResponse(): Promise<Context<V>>;
    off<T extends TraceType | TraceEvent>(event: T, handler: OnMethodHandlerArgMap<V>[T]): void;
    onSpeak(handler: TraceEventHandler<TraceType.SPEAK, V>): void;
    onAudio(handler: TraceEventHandler<TraceType.AUDIO, V>): void;
    onBlock(handler: TraceEventHandler<TraceType.BLOCK, V>): void;
    onDebug(handler: TraceEventHandler<TraceType.DEBUG, V>): void;
    onEnd(handler: TraceEventHandler<TraceType.END, V>): void;
    onFlow(handler: TraceEventHandler<TraceType.FLOW, V>): void;
    onVisual(handler: TraceEventHandler<TraceType.VISUAL, V>): void;
    onChoice(handler: TraceEventHandler<TraceType.CHOICE, V>): void;
    setContext(contextJSON: ResponseContext): void;
    getContext(): Context<V>;
}
export default RuntimeClient;
