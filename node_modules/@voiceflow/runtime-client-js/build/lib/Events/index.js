"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventManager = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const types_1 = require("../types");
class EventManager {
    constructor() {
        this.specHandlers = new Map();
        const traceTypeVals = Object.values(types_1.TraceType);
        traceTypeVals.forEach((traceType) => this.specHandlers.set(traceType, []));
        this.genHandlers = [];
        this.traceEventHandlers = {
            [types_1.TraceEvent.BEFORE_PROCESSING]: [],
            [types_1.TraceEvent.AFTER_PROCESSING]: [],
        };
    }
    onTraceType(event, handler) {
        this.addHandler(handler, this.specHandlers.get(event));
    }
    offTraceType(event, handler) {
        this.removeHandler(handler, this.specHandlers.get(event));
    }
    onTraceEvent(event, handler) {
        this.addHandler(handler, this.traceEventHandlers[event]);
    }
    offTraceEvent(event, handler) {
        this.removeHandler(handler, this.traceEventHandlers[event]);
    }
    onGeneral(handler) {
        this.addHandler(handler, this.genHandlers);
    }
    offGeneral(handler) {
        this.removeHandler(handler, this.genHandlers);
    }
    async handleProcessing(event, context) {
        await bluebird_1.default.each(this.traceEventHandlers[event], async (handler) => {
            await handler(context);
        });
    }
    async handleTrace(trace, context) {
        await bluebird_1.default.each(this.specHandlers.get(trace.type) || [], async (handler, index) => {
            await handler(trace, context, index);
        });
        await bluebird_1.default.each(this.genHandlers, async (handler, index) => {
            await handler(trace, context, index);
        });
    }
    addHandler(handler, handlerList) {
        handlerList.push(handler);
    }
    removeHandler(handler, handlerList) {
        handlerList.splice(handlerList.indexOf(handler), 1);
    }
}
exports.EventManager = EventManager;
exports.default = EventManager;
//# sourceMappingURL=index.js.map