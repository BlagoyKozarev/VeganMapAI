import { TraceFrame } from '@voiceflow/general-types/build/nodes/types';
import { GeneralTrace, TraceEvent, TraceMap, TraceType } from "../types";
import Context from '../Context';
export declare type ResponseHandler<V extends Record<string, any>> = (trace: TraceFrame, context: Context<V>) => Promise<number | void>;
export declare type TraceEventHandler<T extends TraceType, V extends Record<string, any>> = (trace: TraceMap[T], context: Context<V>, index: number) => void;
export declare type GeneralTraceEventHandler<V extends Record<string, any>> = (trace: GeneralTrace, context: Context<V>, index: number) => void;
export declare type BeforeProcessingEventHandler<V extends Record<string, any>> = (context: Context<V>) => void;
export declare type AfterProcessingEventHandler<V extends Record<string, any>> = (context: Context<V>) => void;
declare type TraceEventHandlerMap<V> = {
    [TraceEvent.BEFORE_PROCESSING]: BeforeProcessingEventHandler<V>;
    [TraceEvent.AFTER_PROCESSING]: AfterProcessingEventHandler<V>;
};
export declare class EventManager<V extends Record<string, any>> {
    private specHandlers;
    private genHandlers;
    private traceEventHandlers;
    constructor();
    onTraceType<T extends TraceType>(event: T, handler: TraceEventHandler<T, V>): void;
    offTraceType<T extends TraceType>(event: T, handler: TraceEventHandler<T, V>): void;
    onTraceEvent<T extends Exclude<TraceEvent, TraceEvent.GENERAL>>(event: T, handler: TraceEventHandlerMap<V>[T]): void;
    offTraceEvent<T extends Exclude<TraceEvent, TraceEvent.GENERAL>>(event: T, handler: TraceEventHandlerMap<V>[T]): void;
    onGeneral(handler: GeneralTraceEventHandler<V>): void;
    offGeneral(handler: GeneralTraceEventHandler<V>): void;
    handleProcessing<E extends TraceEvent.AFTER_PROCESSING | TraceEvent.BEFORE_PROCESSING>(event: E, context: Context<V>): Promise<void>;
    handleTrace<T extends TraceType>(trace: TraceMap[T], context: Context<V>): Promise<void>;
    private addHandler;
    private removeHandler;
}
export default EventManager;
