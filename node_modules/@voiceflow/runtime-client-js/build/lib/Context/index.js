"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const types_1 = require("../types");
const Variables_1 = __importDefault(require("../Variables"));
class Context {
    constructor(context) {
        this.context = context;
        this.variables = new Variables_1.default(this.toJSON.bind(this), this.setVariables.bind(this));
    }
    getChips() {
        return this.context.trace.reduce((acc, trace) => (trace.type !== types_1.TraceType.CHOICE ? acc : [...acc, ...trace.payload.choices]), []);
    }
    // returns the entire unfiltered list of traces of the context; can configure whether trace data should be sanitized or not
    getTrace() {
        return this.context.trace;
    }
    // returns the raw context object
    toJSON() {
        return this.context;
    }
    isEnding() {
        return this.context.trace.some((trace) => trace.type === types_1.TraceType.END);
    }
    setVariables(newValues) {
        this.context = Object.assign(Object.assign({}, this.context), { state: Object.assign(Object.assign({}, this.context.state), { variables: Object.assign(Object.assign({}, this.context.state.variables), newValues) }) });
    }
}
exports.Context = Context;
exports.default = Context;
//# sourceMappingURL=index.js.map