"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const Common_1 = require("../Common");
const utils_1 = require("./utils");
class VariableManager {
    constructor(_internalGetState, _internalSetVars) {
        this._internalGetState = _internalGetState;
        this._internalSetVars = _internalSetVars;
    }
    get(key) {
        const value = this.getVariables()[key];
        if (lodash_1.default.isUndefined(value)) {
            throw new Common_1.VFClientError(`variable "${key}" is undefined`);
        }
        return value;
    }
    getAll() {
        return this.getVariables();
    }
    getKeys() {
        return Object.keys(this.getVariables());
    }
    set(key, val) {
        utils_1.validateVarAssignment(key, val);
        this._internalSetVars({
            [key]: val,
        });
    }
    setMany(newVars) {
        utils_1.validateVarMerge(newVars);
        this._internalSetVars(newVars);
    }
    getVariables() {
        const context = this._internalGetState();
        if (context === null) {
            throw new Common_1.VFClientError('cannot access variables, app state was not initialized');
        }
        return context.state.variables;
    }
}
exports.default = VariableManager;
//# sourceMappingURL=index.js.map