import { CanvasNodeVisibility, Locale, Prompt, Voice } from "../types";
export declare enum RepeatType {
    OFF = "OFF",
    ALL = "ALL",
    DIALOG = "DIALOG"
}
export declare enum SessionType {
    RESUME = "resume",
    RESTART = "restart"
}
export declare type RestartSession = {
    type: SessionType.RESTART;
};
export declare type BaseResumeSession<V> = {
    type: SessionType.RESUME;
    resume: null | Prompt<V>;
    follow: null | Prompt<V>;
};
export declare type BaseVersionSettings<V> = {
    error: null | Prompt<V>;
    repeat: RepeatType;
    session: RestartSession | BaseResumeSession<V>;
    defaultVoice: null | V;
    defaultCanvasNodeVisibility: null | CanvasNodeVisibility;
};
export declare type ResumeSession = BaseResumeSession<Voice>;
export declare type GeneralVersionSettings = BaseVersionSettings<Voice> & {
    locales: Locale[];
};
export declare const defaultPrompt: <V>(prompt: Prompt<V> | null | undefined, defaultVoice: V) => Prompt<V> | null;
export declare const defaultBaseVersionSettings: <V>({ error, repeat, session, defaultVoice, defaultCanvasNodeVisibility, }: Partial<BaseVersionSettings<V>> | undefined, { defaultPromptVoice }: {
    defaultPromptVoice: V;
}) => BaseVersionSettings<V>;
export declare const defaultGeneralVersionSettings: ({ locales, ...baseSettings }?: Partial<GeneralVersionSettings>) => GeneralVersionSettings;
