#!/usr/bin/env tsx
import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';
import fs from 'fs';

dotenv.config();

// –í–ê–ñ–ù–û: –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ —Å production DATABASE_URL
async function importToProduction() {
  console.log('üöÄ –î–∏—Ä–µ–∫—Ç–µ–Ω import –≤ production –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞–º–µ production DATABASE_URL
  const productionUrl = process.env.PRODUCTION_DATABASE_URL || process.env.DATABASE_URL;
  
  if (!productionUrl) {
    console.error('‚ùå –õ–∏–ø—Å–≤–∞ DATABASE_URL. –ú–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–π—Ç–µ production database URL');
    process.exit(1);
  }
  
  const pool = new Pool({
    connectionString: productionUrl,
    ssl: { rejectUnauthorized: false } // –ó–∞ production Replit PostgreSQL
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
    const countBefore = await pool.query('SELECT COUNT(*) as count FROM restaurants');
    console.log(`üìä –¢–µ–∫—É—â –±—Ä–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ –≤ production: ${countBefore.rows[0].count}`);
    
    if (parseInt(countBefore.rows[0].count) >= 408) {
      console.log('‚úÖ Production –±–∞–∑–∞—Ç–∞ –≤–µ—á–µ –∏–º–∞ –≤—Å–∏—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏!');
      process.exit(0);
    }
    
    // –ß–µ—Ç–µ–º SQL —Ñ–∞–π–ª–∞
    if (!fs.existsSync('production-import-simple.sql')) {
      console.error('‚ùå –õ–∏–ø—Å–≤–∞ production-import-simple.sql —Ñ–∞–π–ª');
      console.log('–ú–æ–ª—è –∏–∑–ø—ä–ª–Ω–µ—Ç–µ –ø—ä—Ä–≤–æ: tsx generate-simple-sql.ts');
      process.exit(1);
    }
    
    const sqlContent = fs.readFileSync('production-import-simple.sql', 'utf8');
    const statements = sqlContent.split(';\n').filter(stmt => 
      stmt.trim() && stmt.trim().startsWith('INSERT')
    );
    
    console.log(`üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ ${statements.length} —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∞...`);
    
    let imported = 0;
    let skipped = 0;
    
    for (const statement of statements) {
      try {
        await pool.query(statement + ';');
        imported++;
        if (imported % 50 === 0) {
          console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏: ${imported}/${statements.length}`);
        }
      } catch (err) {
        if (err.message.includes('duplicate key')) {
          skipped++;
        } else {
          console.error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç: ${err.message.substring(0, 100)}`);
        }
      }
    }
    
    // –§–∏–Ω–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    const countAfter = await pool.query('SELECT COUNT(*) as count FROM restaurants');
    console.log('\n=== –†–ï–ó–£–õ–¢–ê–¢ ===');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏: ${imported}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–Ω–∞—Ç–∏ (–¥—É–±–ª–∏–∫–∞—Ç–∏): ${skipped}`);
    console.log(`üìä –û–±—â–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ –≤ production: ${countAfter.rows[0].count}`);
    
    if (parseInt(countAfter.rows[0].count) >= 408) {
      console.log('\nüéâ Production –±–∞–∑–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ —Å –≤—Å–∏—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏!');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞:', error.message);
    console.error('–î–µ—Ç–∞–π–ª–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
console.log('='.repeat(50));
console.log('IMPORT –í PRODUCTION –ë–ê–ó–ê –î–ê–ù–ù–ò');
console.log('='.repeat(50));
importToProduction();