
// üîπ –ì–ª–æ–±–∞–ª–µ–Ω –∫–µ—à –≤ –ø–∞–º–µ—Ç—Ç–∞
const restaurantCache: Record<string, { data: any; timestamp: number }> = {};

export async function fetchRestaurants(lat?: number, lng?: number) {
  // –ê–∫–æ –Ω—è–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –æ–±—â –∫–ª—é—á –∑–∞ –≤—Å–∏—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏
  const key = lat && lng ? `${lat.toFixed(3)}|${lng.toFixed(3)}` : 'all-restaurants';
  const now = Date.now();
  const TTL = 300000; // 5 –º–∏–Ω—É—Ç–∏

  // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–µ—à–∞
  if (restaurantCache[key] && now - restaurantCache[key].timestamp < TTL) {
    console.log('[CACHE HIT]', key);
    return restaurantCache[key].data;
  }

  console.log('[CACHE MISS]', key);

  // 2) Fetch –æ—Ç API - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—É–±–ª–∏—á–Ω–∏—è endpoint
  let apiUrl = '/api/restaurants/public/map-data';
  if (lat && lng) {
    apiUrl += `?lat=${lat}&lng=${lng}`;
  }

  const res = await fetch(apiUrl);
  if (!res.ok) {
    throw new Error(`Failed to fetch restaurants: ${res.status}`);
  }
  const response = await res.json();
  
  // –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç response —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞
  const data = response.success ? response.restaurants : [];

  // 3) –ó–∞–ø–∏—Å –≤ –∫–µ—à–∞
  restaurantCache[key] = { data, timestamp: now };

  return data;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–µ—à–∞
export function clearRestaurantCache() {
  Object.keys(restaurantCache).forEach(key => {
    delete restaurantCache[key];
  });
  console.log('[CACHE CLEARED]');
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–µ—à–∞
export function getCacheStats() {
  const keys = Object.keys(restaurantCache);
  const now = Date.now();
  const TTL = 300000;
  
  const activeEntries = keys.filter(key => 
    now - restaurantCache[key].timestamp < TTL
  ).length;
  
  return {
    totalEntries: keys.length,
    activeEntries,
    expiredEntries: keys.length - activeEntries
  };
}
