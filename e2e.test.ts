// e2e.test.ts - End-to-end tests using API calls instead of browser
import { describe, it, expect } from 'vitest';
import axios from 'axios';

describe('üåê End-to-End API —Ç–µ—Å—Ç–æ–≤–µ', () => {
  const baseURL = 'http://localhost:5000';

  it('üè† –ù–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ –¥–æ—Å—Ç—ä–ø–≤–∞', async () => {
    try {
      const response = await axios.get(baseURL);
      expect(response.status).toBe(200);
      expect(response.headers['content-type']).toContain('text/html');
    } catch (error) {
      expect.fail(`–ù–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞: ${error.message}`);
    }
  });

  it('üó∫ API –∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ —Ä–∞–±–æ—Ç–∏ (—Å –∞–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)', async () => {
    try {
      const response = await axios.get(`${baseURL}/api/restaurants/all-available`);
      // –û—á–∞–∫–≤–∞–º–µ –∏–ª–∏ 200 (auto login) –∏–ª–∏ 401 (needs auth)
      expect([200, 401]).toContain(response.status);
    } catch (error) {
      if (error.response?.status === 401) {
        expect(error.response.status).toBe(401);
      } else {
        expect.fail(`API –≥—Ä–µ—à–∫–∞: ${error.message}`);
      }
    }
  });

  it('ü§ñ AI Chat —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å–µ –¥–æ—Å—Ç—ä–ø–≤–∞', async () => {
    try {
      const response = await axios.get(`${baseURL}/ai-chat`);
      expect(response.status).toBe(200);
      expect(response.headers['content-type']).toContain('text/html');
    } catch (error) {
      expect.fail(`AI Chat —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞: ${error.message}`);
    }
  });

  it('üìä –°—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–µ –∑–∞—Ä–µ–∂–¥–∞—Ç', async () => {
    try {
      // –¢–µ—Å—Ç –∑–∞ CSS —Ñ–∞–π–ª–æ–≤–µ
      const cssResponse = await axios.get(`${baseURL}/client/src/index.css`, {
        validateStatus: () => true // –ù–µ —Ö–≤—ä—Ä–ª—è–π error –∑–∞ 404
      });
      
      // –û—á–∞–∫–≤–∞–º–µ –∏–ª–∏ 200 –∏–ª–∏ 404 (–∞–∫–æ –Ω–µ –µ –Ω–∞ —Ç–æ–∑–∏ –ø—ä—Ç)
      expect([200, 404]).toContain(cssResponse.status);
    } catch (error) {
      expect.fail(`–°—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–∏: ${error.message}`);
    }
  });
});