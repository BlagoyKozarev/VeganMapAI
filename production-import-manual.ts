import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();

async function importToProduction() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: false
  });

  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–æ—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏
    const countResult = await pool.query('SELECT COUNT(*) as count FROM restaurants');
    const currentCount = parseInt(countResult.rows[0].count);
    
    console.log(`üîç –ù–∞–º–µ—Ä–µ–Ω–∏ ${currentCount} —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∞ –≤ –±–∞–∑–∞—Ç–∞`);
    
    if (currentCount >= 408) {
      console.log('‚úÖ –ë–∞–∑–∞—Ç–∞ –≤–µ—á–µ —Å—ä–¥—ä—Ä–∂–∞ –≤—Å–∏—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏!');
      process.exit(0);
    }
    
    // –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ SQL —Ñ–∞–π–ª–∞ –∑–∞ –∏–º–ø–æ—Ä—Ç
    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ –æ—Ç SQL —Ñ–∞–π–ª–∞...');
    
    const sqlFile = fs.readFileSync('./production-import-simple.sql', 'utf8');
    
    // –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏ –∑–∞—è–≤–∫–∏
    const statements = sqlFile.split(';').filter(stmt => stmt.trim());
    
    let imported = 0;
    for (const statement of statements) {
      if (statement.trim().startsWith('INSERT INTO restaurants')) {
        try {
          await pool.query(statement + ';');
          imported++;
        } catch (err) {
          // –ò–≥–Ω–æ—Ä–∏—Ä–∞–º–µ –¥—É–±–ª–∏–∫–∞—Ç–∏
          if (!err.message.includes('duplicate key')) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç:', err.message);
          }
        }
      }
    }
    
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ ${imported} —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∞`);
    
    // –§–∏–Ω–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalCount = await pool.query('SELECT COUNT(*) as count FROM restaurants');
    console.log(`üìä –û–±—â–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ –≤ –±–∞–∑–∞—Ç–∞: ${finalCount.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

importToProduction();