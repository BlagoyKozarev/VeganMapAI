
// api.test.ts
import { describe, it, expect } from 'vitest';
import axios from 'axios';

describe('üåê API —Ç–µ—Å—Ç–æ–≤–µ', () => {
  it('—Ç–µ—Å—Ç–≤–∞ /api/restaurants/all-available endpoint (–æ—á–∞–∫–≤–∞ autentification)', async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/restaurants/all-available');
      // –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω, –æ—á–∞–∫–≤–∞–º–µ 200 —Å –¥–∞–Ω–Ω–∏
      expect(response.status).toBe(200);
      expect(Array.isArray(response.data)).toBe(true);
      expect(response.data.length).toBeGreaterThan(0);
    } catch (err) {
      // –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω, –æ—á–∞–∫–≤–∞–º–µ 401 
      if (err.response?.status === 401) {
        expect(err.response.status).toBe(401);
        expect(err.response.data).toHaveProperty('message');
      } else {
        expect.fail(`–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ API –≥—Ä–µ—à–∫–∞: ${err.message}`);
      }
    }
  });

  it('—Ç–µ—Å—Ç–≤–∞ /api/auth/user endpoint', async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/auth/user');
      // –û—á–∞–∫–≤–∞–º–µ 401 –∑–∞ –Ω–µ–æ—Ç–æ—Ä–∏–∑–∏—Ä–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏–ª–∏ 200 –∑–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω
      expect([200, 401]).toContain(response.status);
    } catch (err) {
      // Axios —Ö–≤—ä—Ä–ª—è error –∑–∞ 401, –∫–æ–µ—Ç–æ –µ –æ—á–∞–∫–≤–∞–Ω–æ
      expect(err.response?.status).toBe(401);
    }
  });
});
