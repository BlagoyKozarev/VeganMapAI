set -euo pipefail

# ========= CONFIG =========
PROJECT_ID="centered-inn-460216-r9"
REGION="us-central1"
REPO="veganmap"             # Artifact Registry repository name
SERVICE="veganmap-api"      # Cloud Run service name
KEY_FILE="centered-inn-460216-r9-0f1b22fc9460.json"   # ако вече си логнат, няма да се ползва

# Опитай service-account login (ако вече е логнато, ще мине тихо)
if [ -f "$KEY_FILE" ]; then
  gcloud auth activate-service-account --key-file="$KEY_FILE" || true
fi
gcloud config set project "$PROJECT_ID" >/dev/null
gcloud config set run/region "$REGION" >/dev/null

# ========= Enable APIs (idempotent) =========
gcloud services enable run.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com iam.googleapis.com

# ========= IAM за деплой (ако липсват роли на текущия акаунт) =========
SA_EMAIL="$(gcloud config get account || true)"
# Дай права на АКТУАЛНИЯ identity да може да build-ва и push-ва (ако организацията позволява)
gcloud projects add-iam-policy-binding "$PROJECT_ID" --member="user:${SA_EMAIL}" --role="roles/cloudbuild.builds.editor"    || true
gcloud projects add-iam-policy-binding "$PROJECT_ID" --member="user:${SA_EMAIL}" --role="roles/artifactregistry.writer"     || true

# ========= Artifact Registry repo (ако го няма) =========
gcloud artifacts repositories create "$REPO" --repository-format=docker --location="$REGION" --description="VeganMap images" || true

# ========= Backend Dockerfile (ако липсва) =========
mkdir -p backend
cd backend

if [ ! -f Dockerfile ]; then
  cat > Dockerfile <<'EOF'
FROM node:20-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
ENV PORT=8080
EXPOSE 8080
CMD ["node","index.js"]
EOF
fi

# .dockerignore
cat > .dockerignore <<'EOF'
node_modules
npm-debug.log*
Dockerfile*
.dockerignore
.env
EOF

# Увери се, че има зависимости
npm pkg set type=module >/dev/null
[ -f package.json ] || npm init -y
npm i express cors axios haversine-distance node-cache >/dev/null

# ========= Image tag =========
SHORT_SHA="$(git rev-parse --short HEAD 2>/dev/null || date +%s)"
IMAGE_URI="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${SERVICE}:${SHORT_SHA}"

# ========= Build & Push с Cloud Build =========
cd ..
gcloud builds submit --tag "$IMAGE_URI" ./backend

# ========= Deploy Cloud Run (public) =========
gcloud run deploy "$SERVICE" \
  --image "$IMAGE_URI" \
  --region "$REGION" \
  --allow-unauthenticated \
  --port 8080 \
  --timeout 30 \
  --min-instances 0 \
  --max-instances 3 \
  --set-env-vars "NODE_ENV=production"

# Вземи публичния URL
API_URL="$(gcloud run services describe "$SERVICE" --region "$REGION" --format='value(status.url)')"
echo "[✓] Cloud Run URL: $API_URL"

# ========= Свържи фронтенда към публичния API =========
# Открий последния bucket → CDN_GEOJSON
BUCKET="$(gcloud storage buckets list --format='value(name)' | tail -n1 | sed 's|gs://||')"
CDN_GEOJSON="https://storage.googleapis.com/${BUCKET}/geojson"

mkdir -p frontend
cat > frontend/.env.local <<EOF
NEXT_PUBLIC_API_BASE=${API_URL}
NEXT_PUBLIC_CDN_GEOJSON=${CDN_GEOJSON}
EOF
echo "[i] frontend/.env.local обновен."

# ========= Бърз тест към публичния API =========
curl -s "${API_URL}/healthz" || true
curl -s -X POST "${API_URL}/api/recommend" \
  -H "Content-Type: application/json" \
  -d '{"lat":37.7749,"lng":-122.4194,"radius":3000,"minScore":0,"file":"'"${CDN_GEOJSON}/sf.geojson"'"}' | head -c 300; echo

echo "[✓] Deploy complete. Отвори: ${API_URL}"
