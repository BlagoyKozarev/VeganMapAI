# 🕵️ Complete Production System Audit - Find Root Cause

## 🎯 OBJECTIVE
Perform comprehensive diagnostic to identify WHY production deployment shows 0 restaurants while development has 408. No more guessing - systematic investigation.

## 📋 AUDIT CHECKLIST

### PHASE 1: Environment Verification (5 min)

#### 1.1 Database Connection Test
```bash
# Test if production deployment can connect to database at all
psql $DATABASE_URL -c "SELECT version();"
psql $DATABASE_URL -c "SELECT current_database();"
psql $DATABASE_URL -c "SELECT COUNT(*) FROM restaurants;"
```

**Expected Results:**
- PostgreSQL version shown ✅
- Database name: `neondb` ✅
- Restaurant count: `408` ✅

#### 1.2 Environment Variables Audit
```bash
# Check if all required environment variables exist
echo "=== ENVIRONMENT VARIABLES CHECK ==="
echo "DATABASE_URL exists: $([ -n "$DATABASE_URL" ] && echo "YES" || echo "NO")"
echo "DATABASE_URL starts with postgresql: $(echo $DATABASE_URL | grep -q '^postgresql' && echo "YES" || echo "NO")"
echo "OPENAI_API_KEY exists: $([ -n "$OPENAI_API_KEY" ] && echo "YES" || echo "NO")"
echo "GOOGLE_MAPS_API_KEY exists: $([ -n "$GOOGLE_MAPS_API_KEY" ] && echo "YES" || echo "NO")"
echo "NODE_ENV: $NODE_ENV"
```

#### 1.3 API Endpoint Direct Test
```bash
# Test production API endpoints directly
curl -v https://vegan-map-ai-bkozarev.replit.app/api/restaurants/public/map-data?lat=42.7&lng=23.3
curl -v https://vegan-map-ai-bkozarev.replit.app/api/health
```

### PHASE 2: Code Logic Investigation (10 min)

#### 2.1 Storage Function Analysis
Create diagnostic script: `debug-storage-functions.ts`
```typescript
import { db } from './db.ts';
import { restaurants } from '../shared/schema.ts';
import { getAllRestaurantsWithScores } from './storage.ts';

async function debugStorageFunctions() {
    console.log('=== STORAGE FUNCTION DEBUG ===');
    
    // Test raw database query
    const rawCount = await db.select().from(restaurants);
    console.log(`Raw DB query returns: ${rawCount.length} restaurants`);
    
    // Test with scores filter
    const withScores = await db.select().from(restaurants).where(sql`vegan_score != '0.00'`);
    console.log(`With scores filter: ${withScores.length} restaurants`);
    
    // Test getAllRestaurantsWithScores function
    const functionResult = await getAllRestaurantsWithScores();
    console.log(`getAllRestaurantsWithScores returns: ${functionResult.length} restaurants`);
    
    // Sample data inspection
    if (rawCount.length > 0) {
        console.log('Sample restaurant:', {
            name: rawCount[0].name,
            veganScore: rawCount[0].veganScore,
            latitude: rawCount[0].latitude,
            longitude: rawCount[0].longitude
        });
    }
    
    return {
        rawCount: rawCount.length,
        withScores: withScores.length,
        functionResult: functionResult.length
    };
}

debugStorageFunctions().then(console.log).catch(console.error);
```

#### 2.2 API Route Investigation
Check `server/routes/restaurants.ts` - exact logic:
```bash
# Show the exact API route code
cat server/routes/restaurants.ts | grep -A 20 -B 5 "public/map-data"
```

#### 2.3 Error Logging Enhancement
Add detailed logging to API route:
```typescript
// Temporary debugging addition to restaurants route
router.get('/public/map-data', async (req, res) => {
    console.log('=== PUBLIC MAP DATA REQUEST ===');
    console.log('DATABASE_URL exists:', !!process.env.DATABASE_URL);
    console.log('Query params:', req.query);
    
    try {
        const startTime = Date.now();
        const restaurants = await getAllRestaurantsWithScores();
        const queryTime = Date.now() - startTime;
        
        console.log(`Query completed in ${queryTime}ms`);
        console.log(`Found ${restaurants.length} restaurants`);
        
        if (restaurants.length === 0) {
            console.log('❌ ZERO RESTAURANTS - INVESTIGATING...');
            // Test raw query directly
            const rawQuery = await db.select().from(restaurants).limit(5);
            console.log(`Raw query test: ${rawQuery.length} results`);
            console.log('Sample raw data:', rawQuery[0]);
        }
        
        res.json({
            success: true,
            restaurants: restaurants,
            count: restaurants.length,
            queryTime: queryTime,
            debug: process.env.NODE_ENV === 'development'
        });
        
    } catch (error) {
        console.error('❌ API ERROR:', error);
        res.status(500).json({
            success: false,
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});
```

### PHASE 3: Network & Infrastructure (5 min)

#### 3.1 Deployment Architecture Check
```bash
# Check if we're actually running the right code version
echo "=== CODE VERSION CHECK ==="
git log --oneline -5
git status
echo "Current branch: $(git branch --show-current)"
```

#### 3.2 Process & Memory Check
```bash
# Check if Node.js process is healthy
ps aux | grep node
free -h
df -h
```

#### 3.3 Deployment Logs Analysis
```bash
# Extract recent deployment logs
echo "=== DEPLOYMENT LOGS ==="
# Look for database connection errors, startup errors, etc.
```

### PHASE 4: Development vs Production Comparison (5 min)

#### 4.1 Side-by-Side API Test
```bash
# Test same API call on both environments
echo "=== DEVELOPMENT API ==="
curl -s http://localhost:5000/api/restaurants/public/map-data?lat=42.7&lng=23.3 | jq '.count'

echo "=== PRODUCTION API ==="
curl -s https://vegan-map-ai-bkozarev.replit.app/api/restaurants/public/map-data?lat=42.7&lng=23.3 | jq '.count'
```

#### 4.2 Database Comparison
```bash
# Compare database connections
echo "=== DEVELOPMENT DB ==="
psql $DATABASE_URL -c "SELECT COUNT(*) as dev_count FROM restaurants;"

echo "=== PRODUCTION DB (same URL) ==="
# If they use the same URL, results should be identical
```

### PHASE 5: Frontend Investigation (5 min)

#### 5.1 Browser Network Tab Analysis
Open production site and check:
- Network requests to `/api/restaurants/public/map-data`
- Response status codes and content
- Console errors in browser
- Request headers and response headers

#### 5.2 Frontend Error Handling
Check if frontend is calling the right endpoint:
```javascript
// Browser console test
fetch('/api/restaurants/public/map-data?lat=42.7&lng=23.3')
  .then(r => r.json())
  .then(data => console.log('API Response:', data));
```

## 🔍 SYSTEMATIC INVESTIGATION APPROACH

### Execute in Order:
1. **Run Phase 1** - If any step fails, that's your root cause
2. **Run Phase 2** - Compare development vs production logic
3. **Run Phase 3** - Infrastructure and deployment issues  
4. **Run Phase 4** - Side-by-side comparison
5. **Run Phase 5** - Frontend and browser behavior

### Expected Findings:
- **Database connection works** ✅ → Problem is in code logic
- **Database connection fails** ❌ → Environment variable issue
- **API returns error** ❌ → Server-side bug
- **API returns empty array** ❌ → Filtering logic problem
- **Frontend doesn't call API** ❌ → Client-side issue

## 🎯 DECISION MATRIX

| Finding | Root Cause | Solution |
|---------|------------|----------|
| Database connection fails | Environment variables | Fix DATABASE_URL |
| Database empty | Data import failed | Re-import data |
| API logic filters everything | Code bug | Fix filtering logic |
| Different database URLs | Configuration mismatch | Sync environments |
| Frontend API call wrong | Client-side bug | Fix API endpoint |
| Deployment cache issue | Platform bug | Force clean deployment |

## 📋 DOCUMENTATION REQUIREMENT

**For each phase, document:**
- ✅ What worked as expected
- ❌ What failed or returned unexpected results  
- 🔍 Exact error messages or unexpected values
- 💡 Conclusions drawn from results

**Final report should identify:**
1. **Exact root cause** of the 0 restaurants issue
2. **Specific line of code** or configuration causing it
3. **Precise steps** to fix the problem
4. **Verification method** to confirm fix worked

---

**This audit will definitively identify the root cause. No more guessing!** 🕵️‍♂️