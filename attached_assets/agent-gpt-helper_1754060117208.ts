
// agent-gpt-helper.ts

import axios from 'axios';

// üîê –ö–ª—é—á—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –¥–æ–±–∞–≤–µ–Ω –≤ Replit Settings ‚Üí Secrets –∫–∞—Ç–æ OPENAI_KEY
const OPENAI_KEY = process.env.OPENAI_KEY;

// üìÑ –§–∞–ª—à–∏–≤ –ª–æ–≥ –∑–∞ –ø—Ä–∏–º–µ—Ä ‚Äì –∑–∞–º–µ–Ω–∏ —Å —Ä–µ–∞–ª–µ–Ω –∞–≥–µ–Ω—Ç –ª–æ–≥
const agentLog = [
  "[10:01] Agent started search for vegan places in Sofia.",
  "[10:02] Error: undefined property 'score' at scoring.js:41",
  "[10:03] Retried scoring. Same error.",
  "[10:04] Retried again. Same error.",
  "[10:05] Looping detected."
];

/**
 * –ò–∑–ø—Ä–∞—â–∞ –≤—ä–ø—Ä–æ—Å –∫—ä–º GPT-4o
 */
async function askGPT(userPrompt: string): Promise<string> {
  if (!OPENAI_KEY) {
    return "‚ùå –ù—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω OPENAI_KEY. –ü—Ä–æ–≤–µ—Ä–∏ Replit secrets.";
  }

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: "–¢–∏ —Å–∏ AI –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ–π—Ç–æ –ø–æ–º–∞–≥–∞ –Ω–∞ –∞–≥–µ–Ω—Ç, –∞–∫–æ —Ç–æ–π —Å–µ –∑–∞—Ç—Ä—É–¥–Ω–∏ —Å –∫–æ–¥, –ª–æ–≥–∏–∫–∞ –∏–ª–∏ –≥—Ä–µ—à–∫–∏. –î–∞–π —è—Å–Ω–∏ —Å—Ç—ä–ø–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
          },
          {
            role: "user",
            content: userPrompt
          }
        ],
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENAI_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error: any) {
    console.error("‚ùå GPT –≥—Ä–µ—à–∫–∞:", error.response?.data || error.message);
    return "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å GPT.";
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞ –≤—Ö–æ–¥–Ω–∞ —Ç–æ—á–∫–∞: –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥ –æ—Ç —á–∞—Ç, –≤—Ä—ä—â–∞ –æ—Ç–≥–æ–≤–æ—Ä
 */
export async function handleAgentChat(input: string): Promise<string> {
  if (input.trim().startsWith("/–ø–æ–º–æ—â")) {
    const latestLog = agentLog.slice(-5).join("\n");
    const question = input.replace("/–ø–æ–º–æ—â", "").trim() || "–ê–≥–µ–Ω—Ç—ä—Ç —Ü–∏–∫–ª–∏ –∏–ª–∏ –¥–∞–≤–∞ –ø–æ–≤—Ç–∞—Ä—è—â–∞ —Å–µ –≥—Ä–µ—à–∫–∞.";
    const gptInput = `–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–º–æ—â. –ï—Ç–æ –∫–∞–∫–≤–æ —Å–µ —Å–ª—É—á–≤–∞:\n${latestLog}\n\n–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${question}`;
    const reply = await askGPT(gptInput);
    return `ü§ñ GPT —Å—ä–≤–µ—Ç: ${reply}`;
  }

  return "ü§ñ –û–±—Ä–∞–±–æ—Ç–≤–∞–º –Ω–æ—Ä–º–∞–ª–Ω–æ: " + input;
}

// üí¨ –ü—Ä–∏–º–µ—Ä –∑–∞ –ª–æ–∫–∞–ª–µ–Ω —Ç–µ—Å—Ç:
(async () => {
  const input = "/–ø–æ–º–æ—â scoring –Ω–µ —Ä–∞–±–æ—Ç–∏";
  const result = await handleAgentChat(input);
  console.log(result);
})();
