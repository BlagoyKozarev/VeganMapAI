# ü§ñ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ó–ê REPLIT AGENT - GBGPT INTEGRATION

## –¶–ï–õ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞ GBGPT –∫–∞—Ç–æ primary AI provider –∑–∞ VeganMapAI —Å OpenAI fallback

### ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û:
- GBGPT –µ –±–∞–≤–µ–Ω (5-15 —Å–µ–∫—É–Ω–¥–∏ response time)
- –ù–ï –ø—Ä–æ–º–µ–Ω—è–π —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—Ç–µ agents –±–µ–∑ explicit approval
- –í–∏–Ω–∞–≥–∏ –∑–∞–ø–∞–∑–∏ OpenAI –∫–∞—Ç–æ working fallback
- –¢–µ—Å—Ç–≤–∞–π –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞ –ø—Ä–µ–¥–∏ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—à

---

## –°–¢–™–ü–ö–ê 1: Environment Variables Setup

–î–æ–±–∞–≤–∏ –≤ Replit Secrets —Å–ª–µ–¥–Ω–∏—Ç–µ variables (–∞–∫–æ –Ω–µ —Å–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –≤–µ—á–µ):
```
GBGPT_API_URL=http://192.168.0.245:5000/v1/completions
GBGPT_API_KEY=R@icommerce23
```

**Proveri:** Secrets —Å–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ –≤ Replit dashboard

---

## –°–¢–™–ü–ö–ê 2: –°—ä–∑–¥–∞–π `server/providers/gbgptProvider.ts`

–°—ä–∑–¥–∞–π —Ñ–∞–π–ª–∞ —Å—ä—Å —Å–ª–µ–¥–Ω–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ:

```typescript
interface GBGPTRequest {
  model: string;
  prompt: string;
  max_tokens: number;
  temperature: number;
  top_p?: number;
}

interface GBGPTResponse {
  choices: Array<{
    text: string;
    index: number;
    finish_reason: string;
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export class GBGPTProvider {
  private apiUrl: string;
  private apiKey: string;
  private timeout: number;

  constructor() {
    this.apiUrl = process.env.GBGPT_API_URL || 'http://192.168.0.245:5000/v1/completions';
    this.apiKey = process.env.GBGPT_API_KEY || 'R@icommerce23';
    this.timeout = 20000; // 20 —Å–µ–∫—É–Ω–¥–∏ - GBGPT –µ –±–∞–≤–µ–Ω!
  }

  /**
   * Score restaurant using GBGPT - BG language optimized
   */
  async scoreRestaurant(restaurantData: any): Promise<any> {
    console.log(`üîÑ GBGPT scoring restaurant: ${restaurantData.name} (–º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ 10-15 —Å–µ–∫)`);
    
    const prompt = this.createScoringPrompt(restaurantData);
    
    try {
      const response = await this.makeRequest({
        model: "gpt-3.5-turbo",
        prompt,
        max_tokens: 600,
        temperature: 0.2,
        top_p: 0.9
      });

      return this.parseScoringResponse(response);
      
    } catch (error) {
      console.error('‚ùå GBGPT scoring failed:', error.message);
      throw error;
    }
  }

  /**
   * Core API request method with robust error handling
   */
  private async makeRequest(payload: GBGPTRequest): Promise<string> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    try {
      console.log('üì° Making GBGPT API request... (–º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ –≤—Ä–µ–º–µ)');
      
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
          'User-Agent': 'VeganMapAI/1.0'
        },
        body: JSON.stringify(payload),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`GBGPT API Error ${response.status}: ${errorText}`);
      }

      const data: GBGPTResponse = await response.json();
      
      if (!data.choices || data.choices.length === 0) {
        throw new Error('GBGPT returned no choices');
      }

      return data.choices[0].text.trim();
      
    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error.name === 'AbortError') {
        throw new Error(`GBGPT timeout after ${this.timeout/1000}s - server is slow`);
      }
      
      throw error;
    }
  }

  /**
   * Create scoring prompt in Bulgarian for better GBGPT understanding
   */
  private createScoringPrompt(restaurant: any): string {
    return `–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π —Ç–æ–∑–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –∑–∞ vegan-friendliness –∏ –≤—ä—Ä–Ω–∏ –°–ê–ú–û JSON:

–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç: ${restaurant.name}
–ê–¥—Ä–µ—Å: ${restaurant.address || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
–¢–∏–ø –∫—É—Ö–Ω—è: ${restaurant.cuisineTypes?.join(', ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
–û—Ç–∑–∏–≤–∏: ${restaurant.reviews?.slice(0, 3)?.map(r => r.text)?.join(' | ') || '–ù—è–º–∞ –æ—Ç–∑–∏–≤–∏'}

–í—ä—Ä–Ω–∏ —Ç–æ—á–Ω–æ —Ç–æ–∑–∏ JSON —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç):
{
  "menuVariety": [—á–∏—Å–ª–æ 1-10],
  "ingredientClarity": [—á–∏—Å–ª–æ 1-10], 
  "staffKnowledge": [—á–∏—Å–ª–æ 1-10],
  "crossContamination": [—á–∏—Å–ª–æ 1-10],
  "nutritionalInfo": [—á–∏—Å–ª–æ 1-10],
  "allergenManagement": [—á–∏—Å–ª–æ 1-10],
  "reasoning": "–∫—Ä–∞—Ç–∫–æ –æ–±—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏",
  "confidence": [—á–∏—Å–ª–æ 0.1-1.0]
}`;
  }

  /**
   * Parse GBGPT response and convert to VeganMapAI format
   */
  private parseScoringResponse(response: string): any {
    try {
      // Try to parse JSON from response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in GBGPT response');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      // Convert to VeganMapAI format
      const totalScore = (
        parsed.menuVariety +
        parsed.ingredientClarity +
        parsed.staffKnowledge +
        parsed.crossContamination +
        parsed.nutritionalInfo +
        parsed.allergenManagement
      ) / 6;

      return {
        overallScore: Math.round((totalScore / 10) * 5 * 10) / 10, // Convert to 1-5 scale
        dimensions: {
          menuVariety: parsed.menuVariety,
          ingredientClarity: parsed.ingredientClarity,
          staffKnowledge: parsed.staffKnowledge,
          crossContamination: parsed.crossContamination,
          nutritionalInfo: parsed.nutritionalInfo,
          allergenManagement: parsed.allergenManagement
        },
        reasoning: parsed.reasoning,
        confidence: parsed.confidence || 0.5,
        provider: 'GBGPT',
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå Failed to parse GBGPT response:', error);
      throw new Error('Invalid GBGPT response format');
    }
  }

  /**
   * Health check for GBGPT connectivity
   */
  async healthCheck(): Promise<boolean> {
    try {
      const testResponse = await this.makeRequest({
        model: "gpt-3.5-turbo",
        prompt: "Respond with: OK",
        max_tokens: 10,
        temperature: 0
      });

      return testResponse.toLowerCase().includes('ok');
      
    } catch (error) {
      console.error('‚ùå GBGPT health check failed:', error);
      return false;
    }
  }
}
```

---

## –°–¢–™–ü–ö–ê 3: –°—ä–∑–¥–∞–π `server/routes/testGBGPT.ts`

–°—ä–∑–¥–∞–π —Ç–µ—Å—Ç route –∑–∞ debugging:

```typescript
import express from 'express';
import { GBGPTProvider } from '../providers/gbgptProvider.js';

const router = express.Router();

/**
 * Test endpoint –∑–∞ GBGPT integration
 */
router.post('/test-gbgpt', async (req, res) => {
  try {
    const { restaurantName } = req.body;
    
    const testRestaurant = {
      name: restaurantName || 'Test Restaurant',
      address: 'Sofia, Bulgaria',
      cuisineTypes: ['restaurant', 'food'],
      reviews: [
        { text: '–ò–º–∞—Ç –¥–æ–±—Ä–∏ vegan –æ–ø—Ü–∏–∏' },
        { text: '–ü–µ—Ä—Å–æ–Ω–∞–ª—ä—Ç –∑–Ω–∞–µ –∫–∞–∫–≤–æ –µ vegan' }
      ]
    };

    console.log('üß™ Testing GBGPT with sample restaurant...');
    
    const gbgpt = new GBGPTProvider();
    const startTime = Date.now();
    const result = await gbgpt.scoreRestaurant(testRestaurant);
    const duration = Date.now() - startTime;

    res.json({
      success: true,
      result,
      duration: `${duration}ms`,
      message: `GBGPT test successful in ${duration/1000}s`
    });
    
  } catch (error) {
    console.error('‚ùå GBGPT test failed:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'GBGPT test failed - check logs'
    });
  }
});

/**
 * Health check endpoint
 */
router.get('/gbgpt-health', async (req, res) => {
  try {
    const gbgpt = new GBGPTProvider();
    const isHealthy = await gbgpt.healthCheck();
    
    res.json({
      healthy: isHealthy,
      timestamp: new Date().toISOString(),
      endpoint: process.env.GBGPT_API_URL
    });
    
  } catch (error) {
    res.status(500).json({
      healthy: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

export default router;
```

---

## –°–¢–™–ü–ö–ê 4: Import Test Route –≤ Main Server

–î–æ–±–∞–≤–∏ –≤ `server/index.ts` (–∏–ª–∏ –∫—ä–¥–µ—Ç–æ —Å–∞ –¥—Ä—É–≥–∏—Ç–µ routes):

```typescript
import testGBGPTRouter from './routes/testGBGPT.js';

// Add to your app routes
app.use('/api', testGBGPTRouter);
```

---

## –°–¢–™–ü–ö–ê 5: Testing Protocol

–°–ª–µ–¥ —Å—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ:

1. **Start server:** `npm run dev`
2. **Test health:** GET `/api/gbgpt-health`
3. **Test scoring:** POST `/api/test-gbgpt` —Å body: `{"restaurantName": "–¢–µ—Å—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç"}`

**–û–ß–ê–ö–í–ê–ô:**
- –ü—ä—Ä–≤–∏—è—Ç request –º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ 15-30 —Å–µ–∫—É–Ω–¥–∏
- Console logs —â–µ –ø–æ–∫–∞–∑–≤–∞—Ç progress
- Timeout errors —Å–∞ –≤—ä–∑–º–æ–∂–Ω–∏ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ

---

## ‚ö†Ô∏è TROUBLESHOOTING GUIDANCE

**–ê–∫–æ –∏–º–∞ network errors:**
1. –ü—Ä–æ–≤–µ—Ä–∏ connectivity –¥–æ 192.168.0.245
2. –£–≤–µ–ª–∏—á–∏ timeout –∞–∫–æ –µ –Ω—É–∂–Ω–æ
3. –î–æ–±–∞–≤–∏ –ø–æ–≤–µ—á–µ console.log –∑–∞ debugging

**–ê–∫–æ –∏–º–∞ parsing errors:**
1. Log —Ü—è–ª–æ—Å—Ç–Ω–∏—è response –æ—Ç GBGPT
2. Check –∑–∞ different JSON format
3. Add fallback parsing logic

---

## üìã ACCEPTANCE CRITERIA

–ó–∞ –¥–∞ —Å—á–∏—Ç–∞–º–µ Phase 1 —É—Å–ø–µ—à–µ–Ω:
- ‚úÖ –§–∞–π–ª–æ–≤–µ—Ç–µ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ –±–µ–∑ TypeScript errors
- ‚úÖ Server —Å—Ç–∞—Ä—Ç–∏—Ä–∞ –±–µ–∑ crashes
- ‚úÖ Health check endpoint –æ—Ç–≥–æ–≤–∞—Ä—è
- ‚úÖ Test endpoint –ø—Ä–∞–≤–∏ successful request –∫—ä–º GBGPT
- ‚úÖ Response parsing —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ

---

## üö´ –ó–ê–ë–†–ê–ù–ò

- –ù–ï –ø—Ä–æ–º–µ–Ω—è–π —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ agents (scoreAgent.ts, etc.)
- –ù–ï disable-–≤–∞–π OpenAI integration
- –ù–ï commit-–≤–∞–π sensitive credentials
- –ù–ï –ø—Ä–µ–º–∞—Ö–≤–∞–π error handling

---

## üìû WHEN TO STOP & ASK

–°–ø—Ä–∏ –∏ –ø–æ–ø–∏—Ç–∞–π user –∞–∫–æ:
- Network connectivity failures –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞—Ç >10 –º–∏–Ω—É—Ç–∏
- GBGPT –≤—Ä—ä—â–∞ unexpected response format
- TypeScript compilation errors
- Server crashes –ø—Ä–∏ startup

---

**START IMPLEMENTATION NOW** - —Å—ä–∑–¥–∞–π —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Å—Ç—ä–ø–∫–∞ –ø–æ —Å—Ç—ä–ø–∫–∞ –∏ —Ç–µ—Å—Ç–≤–∞–π –≤—Å—è–∫–∞ —á–∞—Å—Ç! üöÄ